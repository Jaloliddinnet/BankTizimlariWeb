// <auto-generated />
using System;
using BankTIzimlati.Data.BankDBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankTIzimlati.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230307092649_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiUserBank", b =>
                {
                    b.Property<Guid>("bankNameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userNameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("bankNameId", "userNameId");

                    b.HasIndex("userNameId");

                    b.ToTable("ApiUserBank");
                });

            modelBuilder.Entity("BankTizimlari.Domain.Entities.Products.ApiUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PassportSery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "037fef4d-52d5-4dc4-ae8d-45f507089044",
                            EmailConfirmed = false,
                            FirstName = "Firdavs",
                            LastName = "Rustamov",
                            LockoutEnabled = false,
                            NormalizedUserName = "Ferdavs",
                            PassportSery = "AC2654123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEu613zor8nbzgdU0ju/DVzFVvDmbQ3JQv+RaMTkK1UJGvwkss3Uh9jSOKOc8IPYGA==",
                            PhoneNumber = "+998915115341",
                            PhoneNumberConfirmed = false,
                            Region = "Bukhara",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("5e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72dab710-770a-48b6-8b11-7632bb39b86f",
                            EmailConfirmed = false,
                            FirstName = "Jaloliddin",
                            LastName = "Axmedov",
                            LockoutEnabled = false,
                            NormalizedUserName = "Jaloliddin",
                            PassportSery = "AC2995341",
                            PasswordHash = "AQAAAAIAAYagAAAAEA5k5BVlA2djHjFrPrmtil1xRJh5jAeLu8yzAXSl5WMd0EuFofGsYFt+qFP2w8kXaQ==",
                            PhoneNumber = "+998910199897",
                            PhoneNumberConfirmed = false,
                            Region = "Samakand",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("6e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa6bc886-d820-42e3-812d-1f9fae49bdf4",
                            EmailConfirmed = false,
                            FirstName = "Arislon",
                            LastName = "Qosimov",
                            LockoutEnabled = false,
                            NormalizedUserName = "Arislon",
                            PassportSery = "AC2694123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJKvNAKO9vGOvCnv+94uEDncDAs5JTSH7ut40HBtlf05fe7D0JneuTAg2AyeDsn5YQ==",
                            PhoneNumber = "+998946575341",
                            PhoneNumberConfirmed = false,
                            Region = "Bukhara",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("BankTizimlari.Domain.Entities.Products.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Capital")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("banks");
                });

            modelBuilder.Entity("BankTizimlari.Domain.Entities.Products.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec"),
                            Name = "BankAdmin",
                            NormalizedName = "BANKADMIN"
                        },
                        new
                        {
                            Id = new Guid("3e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec"),
                            RoleId = new Guid("1e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec")
                        },
                        new
                        {
                            UserId = new Guid("6e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec"),
                            RoleId = new Guid("2e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec")
                        },
                        new
                        {
                            UserId = new Guid("4e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec"),
                            RoleId = new Guid("3e6c2d6a-dc83-8bab-b7a9-98ae31ee16ec")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApiUserBank", b =>
                {
                    b.HasOne("BankTizimlari.Domain.Entities.Products.Bank", null)
                        .WithMany()
                        .HasForeignKey("bankNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankTizimlari.Domain.Entities.Products.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("userNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BankTizimlari.Domain.Entities.Products.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BankTizimlari.Domain.Entities.Products.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BankTizimlari.Domain.Entities.Products.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BankTizimlari.Domain.Entities.Products.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankTizimlari.Domain.Entities.Products.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BankTizimlari.Domain.Entities.Products.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
